<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001', 'im_size': '1024', 'premask': '0', 'postmask': '2'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1280, 720]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[-1.000,-1.000,-1.000]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="test" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="present_gabor">
      <TextComponent name="print_spatial_freq">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="print_spatial_freq" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.35)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$duration" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$f'''op = {opacity},ori = {orientation},&amp;#10;sf = {spatial_freq:.2f},mask = {mask}&amp;#10;ct = {contrast:.3f},dur = {duration:.2f}'''" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <GratingComponent name="grating">
        <Param name="blendmode" updates="constant" val="avg" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="interpolate" updates="constant" val="nearest" valType="str"/>
        <Param name="mask" updates="set every repeat" val="$mask" valType="str"/>
        <Param name="name" updates="None" val="grating" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="$opacity" valType="code"/>
        <Param name="ori" updates="set every repeat" val="$orientation" valType="code"/>
        <Param name="phase" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sf" updates="set every repeat" val="$spatial_freq" valType="code"/>
        <Param name="size" updates="set every repeat" val="(int(expInfo['im_size']), int(expInfo['im_size']))" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$duration" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="tex" updates="constant" val="sin" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </GratingComponent>
      <CodeComponent name="change_contrast">
        <Param name="Begin Experiment" updates="constant" val="im_size = int(expInfo['im_size'])&amp;#10;&amp;#10;premask = int(expInfo['premask'])&amp;#10;postmask = int(expInfo['postmask'])&amp;#10;&amp;#10;k = 210&amp;#10;mask_directions = [k,k + 90]&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="grating.contrast = contrast&amp;#10;#gabor_tex = (&amp;#10;#visual.filters.makeGrating(res = im_size,&amp;#10;#    cycles = im_size * spatial_freq) *&amp;#10;#visual.filters.makeMask(matrixSize = im_size,&amp;#10;#        shape = 'gauss',range=[0,.01]))&amp;#10;#grating.tex = gabor_tex&amp;#10;#grating.tex = np.random.random([im_size,im_size])*2. - 1.&amp;#10;&amp;#10;#np.random.shuffle(mask_directions)&amp;#10;#INITIALISE SOME STIMULI&amp;#10;grating1 = visual.GratingStim(win, mask=&quot;gauss&quot;,&amp;#10;                              color=[1.0, 1.0, 1.0],&amp;#10;                              opacity=1.0,&amp;#10;                              size=(im_size, im_size),&amp;#10;                              units = 'pix',&amp;#10;                              sf=(0.02,0), ori=mask_directions[0])&amp;#10;&amp;#10;grating2 = visual.GratingStim(win, mask=&quot;gauss&quot;,&amp;#10;                              color=[1.0, 1.0, 1.0],&amp;#10;                              opacity=0.5,&amp;#10;                              size=(im_size, im_size),&amp;#10;                              units = 'pix',&amp;#10;                              sf=(.02,0), ori=mask_directions[1])&amp;#10;&amp;#10;&amp;#10;trialClock = core.Clock()&amp;#10;t = 0&amp;#10;while t &lt; premask:    # quits after some secs&amp;#10;&amp;#10;    t = trialClock.getTime()&amp;#10;&amp;#10;    grating1.setPhase(1*t)  # drift at 1Hz&amp;#10;    grating1.draw()  #redraw it&amp;#10;&amp;#10;    grating2.setPhase(2*t)    #drift at 2Hz&amp;#10;    grating2.draw()  #redraw it&amp;#10;&amp;#10;    win.flip()          #update the screen&amp;#10;&amp;#10;    #handle key presses each frame&amp;#10;    for keys in event.getKeys():&amp;#10;        if keys in ['escape','q']:&amp;#10;            core.quit()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;trialClock = core.Clock()&amp;#10;t = 0&amp;#10;while t &lt; postmask:    # quits after some secs&amp;#10;&amp;#10;    t = trialClock.getTime()&amp;#10;&amp;#10;    grating1.setPhase(1*t)  # drift at 1Hz&amp;#10;    grating1.draw()  #redraw it&amp;#10;&amp;#10;    grating2.setPhase(2*t)    #drift at 2Hz&amp;#10;    grating2.draw()  #redraw it&amp;#10;&amp;#10;    win.flip()          #update the screen&amp;#10;&amp;#10;    #handle key presses each frame&amp;#10;    for keys in event.getKeys():&amp;#10;        if keys in ['escape','q']:&amp;#10;            core.quit()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="change_contrast" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="response">
      <KeyboardComponent name="left_right">
        <Param name="allowedKeys" updates="constant" val="'left','right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="left_right" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="message">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="message" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="&lt;-&gt;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="visibility">
      <KeyboardComponent name="visible">
        <Param name="allowedKeys" updates="constant" val="'1','2','3'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="visible" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="?" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="introduction">
      <TextComponent name="intro">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="intro" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="you will be asked &quot;left&quot; or &quot;right&quot; by pressing &quot;&lt;-&quot; or &quot;-&gt;&quot;&amp;#10;&amp;#10;you will be asked visibility:&amp;#10;    1. unconscious&amp;#10;    2. glimpse&amp;#10;    3. conscious&amp;#10;&amp;#10;press &quot;space&quot; to start." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="to_start">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="to_start" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="introduction"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -49), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -49), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -49), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -49), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -49), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -48), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -48), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -48), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -48), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -48), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -47), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -47), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -47), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -47), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -47), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -46), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -46), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -46), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -46), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -46), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -45), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -45), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -45), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -45), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -45), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -44), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -44), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -44), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -44), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -44), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -43), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -43), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -43), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -43), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -43), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -42), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -42), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -42), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -42), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -42), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -41), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -41), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -41), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -41), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', -41), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'left')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 41), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 41), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 41), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 41), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 41), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 42), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 42), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 42), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 42), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 42), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 43), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 43), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 43), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 43), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 43), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 44), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 44), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 44), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 44), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 44), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 45), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 45), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 45), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 45), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 45), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 46), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 46), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 46), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 46), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 46), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 47), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 47), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 47), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 47), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 47), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 48), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 48), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 48), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 48), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 48), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 49), ('spatial_freq', 256.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 49), ('spatial_freq', 320.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 49), ('spatial_freq', 384.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 49), ('spatial_freq', 448.0), ('duration', 60), ('corrAns', 'right')]), OrderedDict([('contrast', 1.0), ('mask', 'circle'), ('opacity', 1.0), ('orientation', 49), ('spatial_freq', 512.0), ('duration', 60), ('corrAns', 'right')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="experiment.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="present_gabor"/>
    <Routine name="response"/>
    <Routine name="visibility"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
